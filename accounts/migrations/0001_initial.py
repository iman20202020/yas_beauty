# Generated by Django 3.2.5 on 2022-02-10 06:12

import accounts.validators
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=13, verbose_name='شماره همراه')),
                ('username', models.CharField(error_messages={'unique': 'یک کاربر با این ایمیل وجود دارد .'}, help_text=None, max_length=50, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='ایمیل')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('city', models.CharField(default='تهران', max_length=15, primary_key=True, serialize=False, unique=True)),
                ('city_name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='LearnCategory',
            fields=[
                ('category', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('category_name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='PriceRange',
            fields=[
                ('price_range', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('price_range_name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Syllabus',
            fields=[
                ('syllabus', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('syllabus_name', models.CharField(max_length=20)),
                ('learn_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.learncategory')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('national_id', models.PositiveIntegerField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='images/', validators=[accounts.validators.validate_image_size])),
                ('national_card_image', models.ImageField(blank=True, upload_to='images/', validators=[accounts.validators.validate_image_size])),
                ('degree_image', models.ImageField(blank=True, upload_to='images/', validators=[accounts.validators.validate_image_size])),
                ('workshop_number', models.CharField(blank=True, max_length=30)),
                ('workshop_detail', models.CharField(blank=True, max_length=30)),
                ('workshop_price', models.CharField(blank=True, max_length=30)),
                ('qualification', models.CharField(blank=True, max_length=300)),
                ('experience', models.CharField(blank=True, default='3', max_length=3)),
                ('points', models.IntegerField(blank=True, default=3)),
                ('sample_video', models.FileField(blank=True, upload_to='videos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'wmv', 'mov', '3gp']), accounts.validators.validate_video_size], verbose_name='ویدیوی نمونه')),
                ('learn_type', models.IntegerField(blank=True, default=0)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('gender', models.IntegerField(blank=True, default=1)),
                ('category', models.ForeignKey(default='uni', on_delete=django.db.models.deletion.CASCADE, to='accounts.learncategory')),
                ('city', models.ForeignKey(default='تهران', on_delete=django.db.models.deletion.CASCADE, to='accounts.city')),
                ('price_range', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.pricerange')),
                ('syllabus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.syllabus')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('learn_type', models.IntegerField(blank=True, default=0)),
                ('category', models.ForeignKey(default='uni', on_delete=django.db.models.deletion.CASCADE, to='accounts.learncategory')),
                ('city', models.ForeignKey(default='تهران', on_delete=django.db.models.deletion.CASCADE, to='accounts.city')),
                ('price_range', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.pricerange')),
                ('syllabus', models.ForeignKey(default='phys', on_delete=django.db.models.deletion.CASCADE, to='accounts.syllabus')),
                ('user', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
